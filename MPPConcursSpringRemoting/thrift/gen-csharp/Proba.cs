/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Proba : TBase
{
  private int _id;
  private TipProba _tipProba;
  private int _varstaMin;
  private int _varstaMax;
  private int _nrParticipanti;

  public int Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="TipProba"/>
  /// </summary>
  public TipProba TipProba
  {
    get
    {
      return _tipProba;
    }
    set
    {
      __isset.tipProba = true;
      this._tipProba = value;
    }
  }

  public int VarstaMin
  {
    get
    {
      return _varstaMin;
    }
    set
    {
      __isset.varstaMin = true;
      this._varstaMin = value;
    }
  }

  public int VarstaMax
  {
    get
    {
      return _varstaMax;
    }
    set
    {
      __isset.varstaMax = true;
      this._varstaMax = value;
    }
  }

  public int NrParticipanti
  {
    get
    {
      return _nrParticipanti;
    }
    set
    {
      __isset.nrParticipanti = true;
      this._nrParticipanti = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool tipProba;
    public bool varstaMin;
    public bool varstaMax;
    public bool nrParticipanti;
  }

  public Proba() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TipProba = (TipProba)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              VarstaMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              VarstaMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              NrParticipanti = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Proba");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.tipProba) {
        field.Name = "tipProba";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)TipProba);
        oprot.WriteFieldEnd();
      }
      if (__isset.varstaMin) {
        field.Name = "varstaMin";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VarstaMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.varstaMax) {
        field.Name = "varstaMax";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VarstaMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.nrParticipanti) {
        field.Name = "nrParticipanti";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NrParticipanti);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Proba(");
    bool __first = true;
    if (__isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.tipProba) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TipProba: ");
      __sb.Append(TipProba);
    }
    if (__isset.varstaMin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VarstaMin: ");
      __sb.Append(VarstaMin);
    }
    if (__isset.varstaMax) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VarstaMax: ");
      __sb.Append(VarstaMax);
    }
    if (__isset.nrParticipanti) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NrParticipanti: ");
      __sb.Append(NrParticipanti);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

