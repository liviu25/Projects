/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ConcursService {
  public interface ISync {
    void login(User user, ClientServer client);
    void logout(User user, ClientServer client);
    List<Proba> getProbeAndNrParticipanti();
    List<Participant> getParticipantiByProba(int idProba);
    void inscriereParticipant(Participant participant, string tipProba1, string tipProba2);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_login(AsyncCallback callback, object state, User user, ClientServer client);
    void End_login(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_logout(AsyncCallback callback, object state, User user, ClientServer client);
    void End_logout(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProbeAndNrParticipanti(AsyncCallback callback, object state);
    List<Proba> End_getProbeAndNrParticipanti(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getParticipantiByProba(AsyncCallback callback, object state, int idProba);
    List<Participant> End_getParticipantiByProba(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inscriereParticipant(AsyncCallback callback, object state, Participant participant, string tipProba1, string tipProba2);
    void End_inscriereParticipant(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_login(AsyncCallback callback, object state, User user, ClientServer client)
    {
      return send_login(callback, state, user, client);
    }

    public void End_login(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_login();
    }

    #endif

    public void login(User user, ClientServer client)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_login(null, null, user, client);
      End_login(asyncResult);

      #else
      send_login(user, client);
      recv_login();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_login(AsyncCallback callback, object state, User user, ClientServer client)
    {
      oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
      login_args args = new login_args();
      args.User = user;
      args.Client = client;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_login(User user, ClientServer client)
    {
      oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
      login_args args = new login_args();
      args.User = user;
      args.Client = client;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_login()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      login_result result = new login_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_logout(AsyncCallback callback, object state, User user, ClientServer client)
    {
      return send_logout(callback, state, user, client);
    }

    public void End_logout(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_logout();
    }

    #endif

    public void logout(User user, ClientServer client)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_logout(null, null, user, client);
      End_logout(asyncResult);

      #else
      send_logout(user, client);
      recv_logout();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_logout(AsyncCallback callback, object state, User user, ClientServer client)
    {
      oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
      logout_args args = new logout_args();
      args.User = user;
      args.Client = client;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_logout(User user, ClientServer client)
    {
      oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
      logout_args args = new logout_args();
      args.User = user;
      args.Client = client;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_logout()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      logout_result result = new logout_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProbeAndNrParticipanti(AsyncCallback callback, object state)
    {
      return send_getProbeAndNrParticipanti(callback, state);
    }

    public List<Proba> End_getProbeAndNrParticipanti(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProbeAndNrParticipanti();
    }

    #endif

    public List<Proba> getProbeAndNrParticipanti()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProbeAndNrParticipanti(null, null);
      return End_getProbeAndNrParticipanti(asyncResult);

      #else
      send_getProbeAndNrParticipanti();
      return recv_getProbeAndNrParticipanti();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProbeAndNrParticipanti(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getProbeAndNrParticipanti", TMessageType.Call, seqid_));
      getProbeAndNrParticipanti_args args = new getProbeAndNrParticipanti_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProbeAndNrParticipanti()
    {
      oprot_.WriteMessageBegin(new TMessage("getProbeAndNrParticipanti", TMessageType.Call, seqid_));
      getProbeAndNrParticipanti_args args = new getProbeAndNrParticipanti_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Proba> recv_getProbeAndNrParticipanti()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProbeAndNrParticipanti_result result = new getProbeAndNrParticipanti_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProbeAndNrParticipanti failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getParticipantiByProba(AsyncCallback callback, object state, int idProba)
    {
      return send_getParticipantiByProba(callback, state, idProba);
    }

    public List<Participant> End_getParticipantiByProba(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getParticipantiByProba();
    }

    #endif

    public List<Participant> getParticipantiByProba(int idProba)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getParticipantiByProba(null, null, idProba);
      return End_getParticipantiByProba(asyncResult);

      #else
      send_getParticipantiByProba(idProba);
      return recv_getParticipantiByProba();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getParticipantiByProba(AsyncCallback callback, object state, int idProba)
    {
      oprot_.WriteMessageBegin(new TMessage("getParticipantiByProba", TMessageType.Call, seqid_));
      getParticipantiByProba_args args = new getParticipantiByProba_args();
      args.IdProba = idProba;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getParticipantiByProba(int idProba)
    {
      oprot_.WriteMessageBegin(new TMessage("getParticipantiByProba", TMessageType.Call, seqid_));
      getParticipantiByProba_args args = new getParticipantiByProba_args();
      args.IdProba = idProba;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Participant> recv_getParticipantiByProba()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getParticipantiByProba_result result = new getParticipantiByProba_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getParticipantiByProba failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inscriereParticipant(AsyncCallback callback, object state, Participant participant, string tipProba1, string tipProba2)
    {
      return send_inscriereParticipant(callback, state, participant, tipProba1, tipProba2);
    }

    public void End_inscriereParticipant(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inscriereParticipant();
    }

    #endif

    public void inscriereParticipant(Participant participant, string tipProba1, string tipProba2)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inscriereParticipant(null, null, participant, tipProba1, tipProba2);
      End_inscriereParticipant(asyncResult);

      #else
      send_inscriereParticipant(participant, tipProba1, tipProba2);
      recv_inscriereParticipant();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inscriereParticipant(AsyncCallback callback, object state, Participant participant, string tipProba1, string tipProba2)
    {
      oprot_.WriteMessageBegin(new TMessage("inscriereParticipant", TMessageType.Call, seqid_));
      inscriereParticipant_args args = new inscriereParticipant_args();
      args.Participant = participant;
      args.TipProba1 = tipProba1;
      args.TipProba2 = tipProba2;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inscriereParticipant(Participant participant, string tipProba1, string tipProba2)
    {
      oprot_.WriteMessageBegin(new TMessage("inscriereParticipant", TMessageType.Call, seqid_));
      inscriereParticipant_args args = new inscriereParticipant_args();
      args.Participant = participant;
      args.TipProba1 = tipProba1;
      args.TipProba2 = tipProba2;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_inscriereParticipant()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inscriereParticipant_result result = new inscriereParticipant_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["login"] = login_Process;
      processMap_["logout"] = logout_Process;
      processMap_["getProbeAndNrParticipanti"] = getProbeAndNrParticipanti_Process;
      processMap_["getParticipantiByProba"] = getParticipantiByProba_Process;
      processMap_["inscriereParticipant"] = inscriereParticipant_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      login_args args = new login_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      login_result result = new login_result();
      try
      {
        try
        {
          iface_.login(args.User, args.Client);
        }
        catch (ConcursException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      logout_args args = new logout_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      logout_result result = new logout_result();
      try
      {
        try
        {
          iface_.logout(args.User, args.Client);
        }
        catch (ConcursException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProbeAndNrParticipanti_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProbeAndNrParticipanti_args args = new getProbeAndNrParticipanti_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProbeAndNrParticipanti_result result = new getProbeAndNrParticipanti_result();
      try
      {
        try
        {
          result.Success = iface_.getProbeAndNrParticipanti();
        }
        catch (ConcursException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getProbeAndNrParticipanti", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProbeAndNrParticipanti", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getParticipantiByProba_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getParticipantiByProba_args args = new getParticipantiByProba_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getParticipantiByProba_result result = new getParticipantiByProba_result();
      try
      {
        try
        {
          result.Success = iface_.getParticipantiByProba(args.IdProba);
        }
        catch (ConcursException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getParticipantiByProba", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getParticipantiByProba", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inscriereParticipant_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inscriereParticipant_args args = new inscriereParticipant_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inscriereParticipant_result result = new inscriereParticipant_result();
      try
      {
        try
        {
          iface_.inscriereParticipant(args.Participant, args.TipProba1, args.TipProba2);
        }
        catch (ConcursException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("inscriereParticipant", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inscriereParticipant", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class login_args : TBase
  {
    private User _user;
    private ClientServer _client;

    public User User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public ClientServer Client
    {
      get
      {
        return _client;
      }
      set
      {
        __isset.client = true;
        this._client = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool user;
      public bool client;
    }

    public login_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Client = new ClientServer();
                Client.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Client != null && __isset.client) {
          field.Name = "client";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Client.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("login_args(");
      bool __first = true;
      if (User != null && __isset.user) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("User: ");
        __sb.Append(User== null ? "<null>" : User.ToString());
      }
      if (Client != null && __isset.client) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Client: ");
        __sb.Append(Client== null ? "<null>" : Client.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class login_result : TBase
  {
    private ConcursException _ex;

    public ConcursException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public login_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ConcursException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("login_result(");
      bool __first = true;
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logout_args : TBase
  {
    private User _user;
    private ClientServer _client;

    public User User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public ClientServer Client
    {
      get
      {
        return _client;
      }
      set
      {
        __isset.client = true;
        this._client = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool user;
      public bool client;
    }

    public logout_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                User = new User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Client = new ClientServer();
                Client.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Client != null && __isset.client) {
          field.Name = "client";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Client.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logout_args(");
      bool __first = true;
      if (User != null && __isset.user) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("User: ");
        __sb.Append(User== null ? "<null>" : User.ToString());
      }
      if (Client != null && __isset.client) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Client: ");
        __sb.Append(Client== null ? "<null>" : Client.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logout_result : TBase
  {
    private ConcursException _ex;

    public ConcursException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public logout_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ConcursException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logout_result(");
      bool __first = true;
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProbeAndNrParticipanti_args : TBase
  {

    public getProbeAndNrParticipanti_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProbeAndNrParticipanti_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProbeAndNrParticipanti_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProbeAndNrParticipanti_result : TBase
  {
    private List<Proba> _success;
    private ConcursException _ex;

    public List<Proba> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ConcursException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getProbeAndNrParticipanti_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Proba>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Proba _elem2;
                    _elem2 = new Proba();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ConcursException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProbeAndNrParticipanti_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Proba _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProbeAndNrParticipanti_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getParticipantiByProba_args : TBase
  {
    private int _idProba;

    public int IdProba
    {
      get
      {
        return _idProba;
      }
      set
      {
        __isset.idProba = true;
        this._idProba = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool idProba;
    }

    public getParticipantiByProba_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                IdProba = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getParticipantiByProba_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.idProba) {
          field.Name = "idProba";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IdProba);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getParticipantiByProba_args(");
      bool __first = true;
      if (__isset.idProba) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdProba: ");
        __sb.Append(IdProba);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getParticipantiByProba_result : TBase
  {
    private List<Participant> _success;
    private ConcursException _ex;

    public List<Participant> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ConcursException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getParticipantiByProba_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Participant>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Participant _elem6;
                    _elem6 = new Participant();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ConcursException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getParticipantiByProba_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Participant _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getParticipantiByProba_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inscriereParticipant_args : TBase
  {
    private Participant _participant;
    private string _tipProba1;
    private string _tipProba2;

    public Participant Participant
    {
      get
      {
        return _participant;
      }
      set
      {
        __isset.participant = true;
        this._participant = value;
      }
    }

    public string TipProba1
    {
      get
      {
        return _tipProba1;
      }
      set
      {
        __isset.tipProba1 = true;
        this._tipProba1 = value;
      }
    }

    public string TipProba2
    {
      get
      {
        return _tipProba2;
      }
      set
      {
        __isset.tipProba2 = true;
        this._tipProba2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool participant;
      public bool tipProba1;
      public bool tipProba2;
    }

    public inscriereParticipant_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Participant = new Participant();
                Participant.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TipProba1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TipProba2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inscriereParticipant_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Participant != null && __isset.participant) {
          field.Name = "participant";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Participant.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TipProba1 != null && __isset.tipProba1) {
          field.Name = "tipProba1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TipProba1);
          oprot.WriteFieldEnd();
        }
        if (TipProba2 != null && __isset.tipProba2) {
          field.Name = "tipProba2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TipProba2);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inscriereParticipant_args(");
      bool __first = true;
      if (Participant != null && __isset.participant) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Participant: ");
        __sb.Append(Participant== null ? "<null>" : Participant.ToString());
      }
      if (TipProba1 != null && __isset.tipProba1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipProba1: ");
        __sb.Append(TipProba1);
      }
      if (TipProba2 != null && __isset.tipProba2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipProba2: ");
        __sb.Append(TipProba2);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inscriereParticipant_result : TBase
  {
    private ConcursException _ex;

    public ConcursException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public inscriereParticipant_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new ConcursException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inscriereParticipant_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inscriereParticipant_result(");
      bool __first = true;
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
